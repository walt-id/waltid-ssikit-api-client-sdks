/*
walt.id Core API

The walt.id public API documentation

API version: 1.1-SNAPSHOT
Contact: office@walt.id
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResolveDidRequest struct for ResolveDidRequest
type ResolveDidRequest struct {
	Did string `json:"did"`
}

// NewResolveDidRequest instantiates a new ResolveDidRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolveDidRequest(did string) *ResolveDidRequest {
	this := ResolveDidRequest{}
	this.Did = did
	return &this
}

// NewResolveDidRequestWithDefaults instantiates a new ResolveDidRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolveDidRequestWithDefaults() *ResolveDidRequest {
	this := ResolveDidRequest{}
	return &this
}

// GetDid returns the Did field value
func (o *ResolveDidRequest) GetDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Did
}

// GetDidOk returns a tuple with the Did field value
// and a boolean to check if the value has been set.
func (o *ResolveDidRequest) GetDidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Did, true
}

// SetDid sets field value
func (o *ResolveDidRequest) SetDid(v string) {
	o.Did = v
}

func (o ResolveDidRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["did"] = o.Did
	}
	return json.Marshal(toSerialize)
}

type NullableResolveDidRequest struct {
	value *ResolveDidRequest
	isSet bool
}

func (v NullableResolveDidRequest) Get() *ResolveDidRequest {
	return v.value
}

func (v *NullableResolveDidRequest) Set(val *ResolveDidRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResolveDidRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResolveDidRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolveDidRequest(val *ResolveDidRequest) *NullableResolveDidRequest {
	return &NullableResolveDidRequest{value: val, isSet: true}
}

func (v NullableResolveDidRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolveDidRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


