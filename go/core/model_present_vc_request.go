/*
walt.id Core API

The walt.id public API documentation

API version: 1.1-SNAPSHOT
Contact: office@walt.id
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PresentVcRequest struct for PresentVcRequest
type PresentVcRequest struct {
	Vc string `json:"vc"`
	HolderDid string `json:"holderDid"`
	Domain *string `json:"domain,omitempty"`
	Challenge *string `json:"challenge,omitempty"`
}

// NewPresentVcRequest instantiates a new PresentVcRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresentVcRequest(vc string, holderDid string) *PresentVcRequest {
	this := PresentVcRequest{}
	this.Vc = vc
	this.HolderDid = holderDid
	return &this
}

// NewPresentVcRequestWithDefaults instantiates a new PresentVcRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresentVcRequestWithDefaults() *PresentVcRequest {
	this := PresentVcRequest{}
	return &this
}

// GetVc returns the Vc field value
func (o *PresentVcRequest) GetVc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vc
}

// GetVcOk returns a tuple with the Vc field value
// and a boolean to check if the value has been set.
func (o *PresentVcRequest) GetVcOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Vc, true
}

// SetVc sets field value
func (o *PresentVcRequest) SetVc(v string) {
	o.Vc = v
}

// GetHolderDid returns the HolderDid field value
func (o *PresentVcRequest) GetHolderDid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HolderDid
}

// GetHolderDidOk returns a tuple with the HolderDid field value
// and a boolean to check if the value has been set.
func (o *PresentVcRequest) GetHolderDidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HolderDid, true
}

// SetHolderDid sets field value
func (o *PresentVcRequest) SetHolderDid(v string) {
	o.HolderDid = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *PresentVcRequest) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentVcRequest) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *PresentVcRequest) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *PresentVcRequest) SetDomain(v string) {
	o.Domain = &v
}

// GetChallenge returns the Challenge field value if set, zero value otherwise.
func (o *PresentVcRequest) GetChallenge() string {
	if o == nil || o.Challenge == nil {
		var ret string
		return ret
	}
	return *o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentVcRequest) GetChallengeOk() (*string, bool) {
	if o == nil || o.Challenge == nil {
		return nil, false
	}
	return o.Challenge, true
}

// HasChallenge returns a boolean if a field has been set.
func (o *PresentVcRequest) HasChallenge() bool {
	if o != nil && o.Challenge != nil {
		return true
	}

	return false
}

// SetChallenge gets a reference to the given string and assigns it to the Challenge field.
func (o *PresentVcRequest) SetChallenge(v string) {
	o.Challenge = &v
}

func (o PresentVcRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vc"] = o.Vc
	}
	if true {
		toSerialize["holderDid"] = o.HolderDid
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Challenge != nil {
		toSerialize["challenge"] = o.Challenge
	}
	return json.Marshal(toSerialize)
}

type NullablePresentVcRequest struct {
	value *PresentVcRequest
	isSet bool
}

func (v NullablePresentVcRequest) Get() *PresentVcRequest {
	return v.value
}

func (v *NullablePresentVcRequest) Set(val *PresentVcRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePresentVcRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePresentVcRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresentVcRequest(val *PresentVcRequest) *NullablePresentVcRequest {
	return &NullablePresentVcRequest{value: val, isSet: true}
}

func (v NullablePresentVcRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresentVcRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


