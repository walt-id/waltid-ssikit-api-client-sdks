/**
 * walt.id Signatory API
 *
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * @param issuerDid 
 * @param proofType 
 * @param subjectDid 
 * @param verifierDid 
 * @param issuerVerificationMethod 
 * @param domain 
 * @param nonce 
 * @param proofPurpose 
 * @param credentialId 
 * @param issueDate 
 * @param validDate 
 * @param expirationDate 
 * @param dataProviderIdentifier 
 */

data class ProofConfig (

    @Json(name = "issuerDid")
    val issuerDid: kotlin.String,

    @Json(name = "proofType")
    val proofType: ProofConfig.ProofType,

    @Json(name = "subjectDid")
    val subjectDid: kotlin.String? = null,

    @Json(name = "verifierDid")
    val verifierDid: kotlin.String? = null,

    @Json(name = "issuerVerificationMethod")
    val issuerVerificationMethod: kotlin.String? = null,

    @Json(name = "domain")
    val domain: kotlin.String? = null,

    @Json(name = "nonce")
    val nonce: kotlin.String? = null,

    @Json(name = "proofPurpose")
    val proofPurpose: kotlin.String? = null,

    @Json(name = "credentialId")
    val credentialId: kotlin.String? = null,

    @Json(name = "issueDate")
    val issueDate: java.time.OffsetDateTime? = null,

    @Json(name = "validDate")
    val validDate: java.time.OffsetDateTime? = null,

    @Json(name = "expirationDate")
    val expirationDate: java.time.OffsetDateTime? = null,

    @Json(name = "dataProviderIdentifier")
    val dataProviderIdentifier: kotlin.String? = null

) {

    /**
     * 
     *
     * Values: jWT,lDPROOF
     */
    enum class ProofType(val value: kotlin.String) {
        @Json(name = "JWT") jWT("JWT"),
        @Json(name = "LD_PROOF") lDPROOF("LD_PROOF");
    }
}

