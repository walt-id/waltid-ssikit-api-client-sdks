/**
 * walt.id Signatory API
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProofConfig model module.
 * @module model/ProofConfig
 * @version 1.1-SNAPSHOT
 */
class ProofConfig {
    /**
     * Constructs a new <code>ProofConfig</code>.
     * @alias module:model/ProofConfig
     * @param issuerDid {String} 
     * @param proofType {module:model/ProofConfig.ProofTypeEnum} 
     */
    constructor(issuerDid, proofType) { 
        
        ProofConfig.initialize(this, issuerDid, proofType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, issuerDid, proofType) { 
        obj['issuerDid'] = issuerDid;
        obj['proofType'] = proofType;
    }

    /**
     * Constructs a <code>ProofConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProofConfig} obj Optional instance to populate.
     * @return {module:model/ProofConfig} The populated <code>ProofConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProofConfig();

            if (data.hasOwnProperty('issuerDid')) {
                obj['issuerDid'] = ApiClient.convertToType(data['issuerDid'], 'String');
            }
            if (data.hasOwnProperty('subjectDid')) {
                obj['subjectDid'] = ApiClient.convertToType(data['subjectDid'], 'String');
            }
            if (data.hasOwnProperty('verifierDid')) {
                obj['verifierDid'] = ApiClient.convertToType(data['verifierDid'], 'String');
            }
            if (data.hasOwnProperty('issuerVerificationMethod')) {
                obj['issuerVerificationMethod'] = ApiClient.convertToType(data['issuerVerificationMethod'], 'String');
            }
            if (data.hasOwnProperty('proofType')) {
                obj['proofType'] = ApiClient.convertToType(data['proofType'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'String');
            }
            if (data.hasOwnProperty('proofPurpose')) {
                obj['proofPurpose'] = ApiClient.convertToType(data['proofPurpose'], 'String');
            }
            if (data.hasOwnProperty('credentialId')) {
                obj['credentialId'] = ApiClient.convertToType(data['credentialId'], 'String');
            }
            if (data.hasOwnProperty('issueDate')) {
                obj['issueDate'] = ApiClient.convertToType(data['issueDate'], 'Date');
            }
            if (data.hasOwnProperty('validDate')) {
                obj['validDate'] = ApiClient.convertToType(data['validDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('dataProviderIdentifier')) {
                obj['dataProviderIdentifier'] = ApiClient.convertToType(data['dataProviderIdentifier'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} issuerDid
 */
ProofConfig.prototype['issuerDid'] = undefined;

/**
 * @member {String} subjectDid
 */
ProofConfig.prototype['subjectDid'] = undefined;

/**
 * @member {String} verifierDid
 */
ProofConfig.prototype['verifierDid'] = undefined;

/**
 * @member {String} issuerVerificationMethod
 */
ProofConfig.prototype['issuerVerificationMethod'] = undefined;

/**
 * @member {module:model/ProofConfig.ProofTypeEnum} proofType
 */
ProofConfig.prototype['proofType'] = undefined;

/**
 * @member {String} domain
 */
ProofConfig.prototype['domain'] = undefined;

/**
 * @member {String} nonce
 */
ProofConfig.prototype['nonce'] = undefined;

/**
 * @member {String} proofPurpose
 */
ProofConfig.prototype['proofPurpose'] = undefined;

/**
 * @member {String} credentialId
 */
ProofConfig.prototype['credentialId'] = undefined;

/**
 * @member {Date} issueDate
 */
ProofConfig.prototype['issueDate'] = undefined;

/**
 * @member {Date} validDate
 */
ProofConfig.prototype['validDate'] = undefined;

/**
 * @member {Date} expirationDate
 */
ProofConfig.prototype['expirationDate'] = undefined;

/**
 * @member {String} dataProviderIdentifier
 */
ProofConfig.prototype['dataProviderIdentifier'] = undefined;





/**
 * Allowed values for the <code>proofType</code> property.
 * @enum {String}
 * @readonly
 */
ProofConfig['ProofTypeEnum'] = {

    /**
     * value: "JWT"
     * @const
     */
    "JWT": "JWT",

    /**
     * value: "LD_PROOF"
     * @const
     */
    "LD_PROOF": "LD_PROOF"
};



export default ProofConfig;

