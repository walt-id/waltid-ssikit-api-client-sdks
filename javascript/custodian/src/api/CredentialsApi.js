/**
 * walt.id Custodian API
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import StoreCredentialRequest from '../model/StoreCredentialRequest';

/**
* Credentials service.
* @module api/CredentialsApi
* @version 1.1-SNAPSHOT
*/
export default class CredentialsApi {

    /**
    * Constructs a new CredentialsApi. 
    * @alias module:api/CredentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteCredential operation.
     * @callback module:api/CredentialsApi~deleteCredentialCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific credential by alias
     * @param {String} alias 
     * @param {module:api/CredentialsApi~deleteCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteCredential(alias, callback) {
      let postBody = null;
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling deleteCredential");
      }

      let pathParams = {
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/credentials/{alias}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredential operation.
     * @callback module:api/CredentialsApi~getCredentialCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific Credential by id
     * @param {String} id 
     * @param {module:api/CredentialsApi~getCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getCredential(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCredential");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/credentials/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCredentialIds operation.
     * @callback module:api/CredentialsApi~listCredentialIdsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all credential IDs the custodian knows of
     * @param {module:api/CredentialsApi~listCredentialIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listCredentialIds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/credentials/listCredentialIds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCredentials operation.
     * @callback module:api/CredentialsApi~listCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all credentials the custodian knows of
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id 
     * @param {module:api/CredentialsApi~listCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listCredentials(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storeCredential operation.
     * @callback module:api/CredentialsApi~storeCredentialCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stores a credential
     * @param {String} alias 
     * @param {Object} opts Optional parameters
     * @param {module:model/StoreCredentialRequest} opts.storeCredentialRequest Store Credential Request
     * @param {module:api/CredentialsApi~storeCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    storeCredential(alias, opts, callback) {
      opts = opts || {};
      let postBody = opts['storeCredentialRequest'];
      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling storeCredential");
      }

      let pathParams = {
        'alias': alias
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/credentials/{alias}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
