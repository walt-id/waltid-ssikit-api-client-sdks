/**
 * walt.id Core API
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateVcRequest from '../model/CreateVcRequest';
import VerifyVcRequest from '../model/VerifyVcRequest';

/**
* VerifiableCredentials service.
* @module api/VerifiableCredentialsApi
* @version 1.1-SNAPSHOT
*/
export default class VerifiableCredentialsApi {

    /**
    * Constructs a new VerifiableCredentialsApi. 
    * @alias module:api/VerifiableCredentialsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createVc operation.
     * @callback module:api/VerifiableCredentialsApi~createVcCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create VC
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateVcRequest} opts.createVcRequest Defines the credential issuer, holder and optionally a credential template  -  TODO: build credential based on the request e.g. load template, substitute values
     * @param {module:api/VerifiableCredentialsApi~createVcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createVc(opts, callback) {
      opts = opts || {};
      let postBody = opts['createVcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/vc/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVc operation.
     * @callback module:api/VerifiableCredentialsApi~deleteVcCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete VC
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body ID of VC to be deleted
     * @param {module:api/VerifiableCredentialsApi~deleteVcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteVc(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVc");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/vc/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importVc operation.
     * @callback module:api/VerifiableCredentialsApi~importVcCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import VC
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/VerifiableCredentialsApi~importVcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    importVc(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/vc/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVcs operation.
     * @callback module:api/VerifiableCredentialsApi~listVcsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List VCs
     * @param {module:api/VerifiableCredentialsApi~listVcsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listVcs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/v1/vc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadVc operation.
     * @callback module:api/VerifiableCredentialsApi~loadVcCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load VC
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body ID of the DID to be loaded
     * @param {module:api/VerifiableCredentialsApi~loadVcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    loadVc(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling loadVc");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/vc/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyVc operation.
     * @callback module:api/VerifiableCredentialsApi~verifyVcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyVcRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify VC
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyVcRequest} opts.verifyVcRequest VC to be verified
     * @param {module:api/VerifiableCredentialsApi~verifyVcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyVcRequest}
     */
    verifyVc(opts, callback) {
      opts = opts || {};
      let postBody = opts['verifyVcRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyVcRequest;
      return this.apiClient.callApi(
        '/v1/vc/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
