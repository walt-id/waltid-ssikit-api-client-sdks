/**
 * walt.id Core API
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDidRequest from '../model/CreateDidRequest';
import ResolveDidRequest from '../model/ResolveDidRequest';

/**
* DecentralizedIdentifiers service.
* @module api/DecentralizedIdentifiersApi
* @version 1.1-SNAPSHOT
*/
export default class DecentralizedIdentifiersApi {

    /**
    * Constructs a new DecentralizedIdentifiersApi. 
    * @alias module:api/DecentralizedIdentifiersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDid operation.
     * @callback module:api/DecentralizedIdentifiersApi~createDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create DID
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateDidRequest} opts.createDidRequest Defines the DID method and optionally the key to be used
     * @param {module:api/DecentralizedIdentifiersApi~createDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createDid(opts, callback) {
      opts = opts || {};
      let postBody = opts['createDidRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/did/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDid operation.
     * @callback module:api/DecentralizedIdentifiersApi~deleteDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body ID of the DID to be deleted
     * @param {module:api/DecentralizedIdentifiersApi~deleteDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteDid(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteDid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/did/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importDid operation.
     * @callback module:api/DecentralizedIdentifiersApi~importDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import DID
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Imports the DID to the underlying data store
     * @param {module:api/DecentralizedIdentifiersApi~importDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    importDid(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/did/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDids operation.
     * @callback module:api/DecentralizedIdentifiersApi~listDidsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List DIDs
     * @param {module:api/DecentralizedIdentifiersApi~listDidsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    listDids(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/v1/did', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadDid operation.
     * @callback module:api/DecentralizedIdentifiersApi~loadDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load DID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body ID of the DID to be loaded
     * @param {module:api/DecentralizedIdentifiersApi~loadDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    loadDid(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling loadDid");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/did/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveDid operation.
     * @callback module:api/DecentralizedIdentifiersApi~resolveDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolve DID
     * @param {Object} opts Optional parameters
     * @param {module:model/ResolveDidRequest} opts.resolveDidRequest Identifier to be resolved
     * @param {module:api/DecentralizedIdentifiersApi~resolveDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resolveDid(opts, callback) {
      opts = opts || {};
      let postBody = opts['resolveDidRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/did/resolve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
