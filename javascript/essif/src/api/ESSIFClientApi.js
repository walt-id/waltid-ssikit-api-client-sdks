/**
 * walt.id ESSIF API
 * The walt.id public API documentation
 *
 * The version of the OpenAPI document: 1.1-SNAPSHOT
 * Contact: office@walt.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EbsiOnboardRequest from '../model/EbsiOnboardRequest';

/**
* ESSIFClient service.
* @module api/ESSIFClientApi
* @version 1.1-SNAPSHOT
*/
export default class ESSIFClientApi {

    /**
    * Constructs a new ESSIFClientApi. 
    * @alias module:api/ESSIFClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDid operation.
     * @callback module:api/ESSIFClientApi~createDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs the ESSIF Authorization API flow
     * @param {Object} opts Optional parameters
     * @param {String} opts.body DID
     * @param {module:api/ESSIFClientApi~createDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createDid(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/client/auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the onboard operation.
     * @callback module:api/ESSIFClientApi~onboardCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EBSI onboarding flow, which requests a Verifiable Authorization from the EOS.
     * @param {Object} opts Optional parameters
     * @param {module:model/EbsiOnboardRequest} opts.ebsiOnboardRequest DID to be registered on the EBSI Blockchain; Bearer token to be used to authenticate the user. Get it from here https://app.preprod.ebsi.eu/users-onboarding
     * @param {module:api/ESSIFClientApi~onboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    onboard(opts, callback) {
      opts = opts || {};
      let postBody = opts['ebsiOnboardRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/client/onboard', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerDid operation.
     * @callback module:api/ESSIFClientApi~registerDidCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers DID on the EBSI Blockchain
     * @param {Object} opts Optional parameters
     * @param {String} opts.body DID
     * @param {module:api/ESSIFClientApi~registerDidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    registerDid(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/client/registerDid', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
